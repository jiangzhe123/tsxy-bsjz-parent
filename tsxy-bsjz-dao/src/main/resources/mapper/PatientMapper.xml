<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tsxy.bsjz.platform.dao.mapper.PatientMapper">
  <resultMap id="BaseResultMap" type="tsxy.bsjz.platform.model.Patient">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="birthday" jdbcType="TIMESTAMP" property="birthday" />
    <result column="identity" jdbcType="VARCHAR" property="identity" />
    <result column="familyPhone" jdbcType="VARCHAR" property="familyPhone" />
    <result column="familyContactId" jdbcType="INTEGER" property="familyContactId" />
    <result column="departmentId" jdbcType="INTEGER" property="departmentId" />
    <result column="doctorId" jdbcType="INTEGER" property="doctorId" />
    <result column="allergy" jdbcType="VARCHAR" property="allergy" />
    <result column="patientState" jdbcType="INTEGER" property="patientState" />
    <result column="createDate" jdbcType="TIMESTAMP" property="createDate" />
    <association property="familyContact" column="familyContactId" select="tsxy.bsjz.platform.dao.mapper.FamilycontactMapper.selectByPrimaryKey"/>
    <association property="department" column="departmentId" select="tsxy.bsjz.platform.dao.mapper.DepartmentMapper.selectByPrimaryKey"/>
    <association property="doctor" column="doctorId" select="tsxy.bsjz.platform.dao.mapper.DoctorMapper.selectByPrimaryKey"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, phone, sex, birthday, identity, familyPhone, familyContactId, departmentId, 
    doctorId, allergy, patientState, createDate
  </sql>
  <select id="selectByExample" parameterType="tsxy.bsjz.platform.model.PatientExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from t_patient
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_patient
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_patient
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="tsxy.bsjz.platform.model.PatientExample">
    delete from t_patient
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="tsxy.bsjz.platform.model.Patient">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_patient (name, phone, sex, 
      birthday, identity, familyPhone, 
      familyContactId, departmentId, doctorId, 
      allergy, patientState, createDate
      )
    values (#{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER}, 
      #{birthday,jdbcType=TIMESTAMP}, #{identity,jdbcType=VARCHAR}, #{familyPhone,jdbcType=VARCHAR}, 
      #{familyContactId,jdbcType=INTEGER}, #{departmentId,jdbcType=INTEGER}, #{doctorId,jdbcType=INTEGER}, 
      #{allergy,jdbcType=VARCHAR}, #{patientState,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="tsxy.bsjz.platform.model.Patient">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_patient
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="identity != null">
        identity,
      </if>
      <if test="familyPhone != null">
        familyPhone,
      </if>
      <if test="familyContactId != null">
        familyContactId,
      </if>
      <if test="departmentId != null">
        departmentId,
      </if>
      <if test="doctorId != null">
        doctorId,
      </if>
      <if test="allergy != null">
        allergy,
      </if>
      <if test="patientState != null">
        patientState,
      </if>
      <if test="createDate != null">
        createDate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="identity != null">
        #{identity,jdbcType=VARCHAR},
      </if>
      <if test="familyPhone != null">
        #{familyPhone,jdbcType=VARCHAR},
      </if>
      <if test="familyContactId != null">
        #{familyContactId,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null">
        #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="allergy != null">
        #{allergy,jdbcType=VARCHAR},
      </if>
      <if test="patientState != null">
        #{patientState,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="tsxy.bsjz.platform.model.PatientExample" resultType="java.lang.Long">
    select count(*) from t_patient
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_patient
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="record.identity != null">
        identity = #{record.identity,jdbcType=VARCHAR},
      </if>
      <if test="record.familyPhone != null">
        familyPhone = #{record.familyPhone,jdbcType=VARCHAR},
      </if>
      <if test="record.familyContactId != null">
        familyContactId = #{record.familyContactId,jdbcType=INTEGER},
      </if>
      <if test="record.departmentId != null">
        departmentId = #{record.departmentId,jdbcType=INTEGER},
      </if>
      <if test="record.doctorId != null">
        doctorId = #{record.doctorId,jdbcType=INTEGER},
      </if>
      <if test="record.allergy != null">
        allergy = #{record.allergy,jdbcType=VARCHAR},
      </if>
      <if test="record.patientState != null">
        patientState = #{record.patientState,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null">
        createDate = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_patient
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      birthday = #{record.birthday,jdbcType=TIMESTAMP},
      identity = #{record.identity,jdbcType=VARCHAR},
      familyPhone = #{record.familyPhone,jdbcType=VARCHAR},
      familyContactId = #{record.familyContactId,jdbcType=INTEGER},
      departmentId = #{record.departmentId,jdbcType=INTEGER},
      doctorId = #{record.doctorId,jdbcType=INTEGER},
      allergy = #{record.allergy,jdbcType=VARCHAR},
      patientState = #{record.patientState,jdbcType=INTEGER},
      createDate = #{record.createDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="tsxy.bsjz.platform.model.Patient">
    update t_patient
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="identity != null">
        identity = #{identity,jdbcType=VARCHAR},
      </if>
      <if test="familyPhone != null">
        familyPhone = #{familyPhone,jdbcType=VARCHAR},
      </if>
      <if test="familyContactId != null">
        familyContactId = #{familyContactId,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null">
        departmentId = #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null">
        doctorId = #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="allergy != null">
        allergy = #{allergy,jdbcType=VARCHAR},
      </if>
      <if test="patientState != null">
        patientState = #{patientState,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        createDate = #{createDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="tsxy.bsjz.platform.model.Patient">
    update t_patient
    set name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      birthday = #{birthday,jdbcType=TIMESTAMP},
      identity = #{identity,jdbcType=VARCHAR},
      familyPhone = #{familyPhone,jdbcType=VARCHAR},
      familyContactId = #{familyContactId,jdbcType=INTEGER},
      departmentId = #{departmentId,jdbcType=INTEGER},
      doctorId = #{doctorId,jdbcType=INTEGER},
      allergy = #{allergy,jdbcType=VARCHAR},
      patientState = #{patientState,jdbcType=INTEGER},
      createDate = #{createDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectNotSickbedPatient" parameterType="java.lang.Integer" resultType="tsxy.bsjz.platform.model.Patient">
    SELECT <include refid="Base_Column_List" /> from t_patient where id not in(SELECT patientId from t_sickbed where patientId is not NULL) and departmentId = #{departmentId}
  </select>
  <update id="updateFamilyContactNull" parameterType="java.util.List">
    UPDATE t_patient SET familyContactId = NULL WHERE familyContactId IN
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </update>
  <update id="updateDepartmentNull" parameterType="java.util.List">
    UPDATE t_patient SET departmentId = NULL WHERE departmentId IN
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </update>
  <update id="updateDoctorNull" parameterType="java.util.List">
    UPDATE t_patient SET doctorId = NULL WHERE doctorId IN
    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </update>
</mapper>